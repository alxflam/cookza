// Mocks generated by Mockito 5.0.2 from annotations
// in cookza/test/mocks/shared_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i10;

import 'package:cookza/model/entities/abstract/recipe_entity.dart' as _i11;
import 'package:cookza/model/entities/abstract/shopping_list_entity.dart'
    as _i7;
import 'package:cookza/model/entities/mutable/mutable_shopping_list_item.dart'
    as _i6;
import 'package:cookza/services/local_storage.dart' as _i8;
import 'package:cookza/services/recipe/image_manager.dart' as _i9;
import 'package:cookza/services/shopping_list/shopping_list_items_generator.dart'
    as _i4;
import 'package:flutter/src/widgets/navigator.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeFile extends _i1.Fake implements _i2.File {}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i3.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(_i3.Route<dynamic>? route, _i3.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i3.Route<dynamic>? route, _i3.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i3.Route<dynamic>? route, _i3.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i3.Route<dynamic>? route, _i3.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
}

/// A class which mocks [ShoppingListItemsGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockShoppingListItemsGenerator extends _i1.Mock
    implements _i4.ShoppingListItemsGenerator {
  MockShoppingListItemsGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.MutableShoppingListItem>> generateItems(
          _i7.ShoppingListEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#generateItems, [entity]),
              returnValue: Future.value(<_i6.MutableShoppingListItem>[]))
          as _i5.Future<List<_i6.MutableShoppingListItem>>);
}

/// A class which mocks [StorageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageProvider extends _i1.Mock implements _i8.StorageProvider {
  MockStorageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> fileExists(String? path) =>
      (super.noSuchMethod(Invocation.method(#fileExists, [path]),
          returnValue: Future.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<String> getTempDirectory() =>
      (super.noSuchMethod(Invocation.method(#getTempDirectory, []),
          returnValue: Future.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getImageDirectory() =>
      (super.noSuchMethod(Invocation.method(#getImageDirectory, []),
          returnValue: Future.value('')) as _i5.Future<String>);
  @override
  _i5.Future<_i2.File> getExeptionLogFile() =>
      (super.noSuchMethod(Invocation.method(#getExeptionLogFile, []),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i2.File>);
  @override
  _i5.Future<void> updateExeptionLogFile(String? content) =>
      (super.noSuchMethod(Invocation.method(#updateExeptionLogFile, [content]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> clearExceptionLogFile() =>
      (super.noSuchMethod(Invocation.method(#clearExceptionLogFile, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}

/// A class which mocks [ImageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageManager extends _i1.Mock implements _i9.ImageManager {
  MockImageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> uploadRecipeImage(String? recipeId, _i2.File? file) => (super
      .noSuchMethod(Invocation.method(#uploadRecipeImage, [recipeId, file]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> uploadRecipeImageFromBytes(
          String? recipeId, _i10.Uint8List? bytes) =>
      (super.noSuchMethod(
          Invocation.method(#uploadRecipeImageFromBytes, [recipeId, bytes]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteRecipeImage(_i11.RecipeEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#deleteRecipeImage, [entity]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> getRecipeImageURL(String? recipeId) =>
      (super.noSuchMethod(Invocation.method(#getRecipeImageURL, [recipeId]),
          returnValue: Future.value('')) as _i5.Future<String>);
  @override
  String getRecipeImagePath(String? recipeId) =>
      (super.noSuchMethod(Invocation.method(#getRecipeImagePath, [recipeId]),
          returnValue: '') as String);
  @override
  _i5.Future<_i2.File?> getRecipeImageFile(_i11.RecipeEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#getRecipeImageFile, [entity]),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i2.File?>);
  @override
  _i5.Future<void> deleteLocalImage(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#deleteLocalImage, [fileName]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}
