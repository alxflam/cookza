// Mocks generated by Mockito 5.0.7 from annotations
// in cookza/test/mocks/shared_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i21;
import 'dart:collection' as _i27;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i38;

import 'package:cloud_firestore/cloud_firestore.dart' as _i39;
import 'package:cookza/model/entities/abstract/ingredient_note_entity.dart'
    as _i28;
import 'package:cookza/model/entities/abstract/meal_plan_collection_entity.dart'
    as _i13;
import 'package:cookza/model/entities/abstract/meal_plan_entity.dart' as _i12;
import 'package:cookza/model/entities/abstract/rating_entity.dart' as _i17;
import 'package:cookza/model/entities/abstract/recipe_collection_entity.dart'
    as _i3;
import 'package:cookza/model/entities/abstract/recipe_entity.dart' as _i11;
import 'package:cookza/model/entities/abstract/shopping_list_entity.dart'
    as _i5;
import 'package:cookza/model/entities/abstract/user_entity.dart' as _i24;
import 'package:cookza/model/entities/firebase/ingredient_note_entity.dart'
    as _i40;
import 'package:cookza/model/entities/firebase/instruction_entity.dart' as _i41;
import 'package:cookza/model/entities/firebase/meal_plan_collection_entity.dart'
    as _i15;
import 'package:cookza/model/entities/mutable/mutable_shopping_list_item.dart'
    as _i22;
import 'package:cookza/services/api/chefkoch.dart' as _i35;
import 'package:cookza/services/firebase_provider.dart' as _i16;
import 'package:cookza/services/flutter/navigator_service.dart' as _i44;
import 'package:cookza/services/image_parser.dart' as _i42;
import 'package:cookza/services/local_storage.dart' as _i23;
import 'package:cookza/services/meal_plan_manager.dart' as _i14;
import 'package:cookza/services/recipe/image_manager.dart' as _i37;
import 'package:cookza/services/recipe/recipe_manager.dart' as _i4;
import 'package:cookza/services/recipe/similarity_service.dart' as _i26;
import 'package:cookza/services/shopping_list/shopping_list_items_generator.dart'
    as _i20;
import 'package:cookza/services/shopping_list/shopping_list_manager.dart'
    as _i25;
import 'package:cookza/viewmodel/recipe_edit/recipe_edit_step.dart' as _i18;
import 'package:firebase_auth/firebase_auth.dart' as _i8;
import 'package:firebase_auth_platform_interface/src/action_code_info.dart'
    as _i7;
import 'package:firebase_auth_platform_interface/src/action_code_settings.dart'
    as _i29;
import 'package:firebase_auth_platform_interface/src/auth_credential.dart'
    as _i31;
import 'package:firebase_auth_platform_interface/src/auth_provider.dart'
    as _i32;
import 'package:firebase_auth_platform_interface/src/id_token_result.dart'
    as _i10;
import 'package:firebase_auth_platform_interface/src/providers/phone_auth.dart'
    as _i34;
import 'package:firebase_auth_platform_interface/src/types.dart' as _i30;
import 'package:firebase_auth_platform_interface/src/user_info.dart' as _i33;
import 'package:firebase_auth_platform_interface/src/user_metadata.dart' as _i9;
import 'package:firebase_core/firebase_core.dart' as _i6;
import 'package:firebase_ml_vision/firebase_ml_vision.dart' as _i43;
import 'package:flutter/src/widgets/framework.dart' as _i19;
import 'package:flutter/src/widgets/navigator.dart' as _i36;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeFile extends _i1.Fake implements _i2.File {}

class _FakeRecipeCollectionEntity extends _i1.Fake
    implements _i3.RecipeCollectionEntity {}

class _FakeRecipeManager extends _i1.Fake implements _i4.RecipeManager {}

class _FakeShoppingListEntity extends _i1.Fake
    implements _i5.ShoppingListEntity {}

class _FakeFirebaseApp extends _i1.Fake implements _i6.FirebaseApp {}

class _FakeActionCodeInfo extends _i1.Fake implements _i7.ActionCodeInfo {}

class _FakeUserCredential extends _i1.Fake implements _i8.UserCredential {}

class _FakeConfirmationResult extends _i1.Fake
    implements _i8.ConfirmationResult {}

class _FakeUserMetadata extends _i1.Fake implements _i9.UserMetadata {}

class _FakeIdTokenResult extends _i1.Fake implements _i10.IdTokenResult {}

class _FakeUser extends _i1.Fake implements _i8.User {}

class _FakeRecipeEntity extends _i1.Fake implements _i11.RecipeEntity {}

class _FakeMealPlanEntity extends _i1.Fake implements _i12.MealPlanEntity {}

class _FakeMealPlanCollectionEntity extends _i1.Fake
    implements _i13.MealPlanCollectionEntity {}

class _FakeMealPlanManager extends _i1.Fake implements _i14.MealPlanManager {}

class _FakeMealPlanCollectionEntityFirebase extends _i1.Fake
    implements _i15.MealPlanCollectionEntityFirebase {}

class _FakeFirebaseProvider extends _i1.Fake implements _i16.FirebaseProvider {}

class _FakeRatingEntity extends _i1.Fake implements _i17.RatingEntity {}

class _FakeRecipeOverviewEditStep extends _i1.Fake
    implements _i18.RecipeOverviewEditStep {}

class _FakeRecipeIngredientEditStep extends _i1.Fake
    implements _i18.RecipeIngredientEditStep {}

class _FakeRecipeInstructionEditStep extends _i1.Fake
    implements _i18.RecipeInstructionEditStep {}

class _FakeGlobalKey<T extends _i19.State<_i19.StatefulWidget>> extends _i1.Fake
    implements _i19.GlobalKey<T> {}

/// A class which mocks [ShoppingListItemsGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockShoppingListItemsGenerator extends _i1.Mock
    implements _i20.ShoppingListItemsGenerator {
  MockShoppingListItemsGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.Future<List<_i22.MutableShoppingListItem>> generateItems(
          _i5.ShoppingListEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#generateItems, [entity]),
              returnValue: Future<List<_i22.MutableShoppingListItem>>.value(
                  <_i22.MutableShoppingListItem>[]))
          as _i21.Future<List<_i22.MutableShoppingListItem>>);
}

/// A class which mocks [StorageProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageProvider extends _i1.Mock implements _i23.StorageProvider {
  MockStorageProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.Future<String> getTempDirectory() =>
      (super.noSuchMethod(Invocation.method(#getTempDirectory, []),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  _i21.Future<String> getImageDirectory() =>
      (super.noSuchMethod(Invocation.method(#getImageDirectory, []),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  _i21.Future<_i2.File> getExeptionLogFile() =>
      (super.noSuchMethod(Invocation.method(#getExeptionLogFile, []),
              returnValue: Future<_i2.File>.value(_FakeFile()))
          as _i21.Future<_i2.File>);
  @override
  _i21.Future<void> updateExeptionLogFile(String? content) =>
      (super.noSuchMethod(Invocation.method(#updateExeptionLogFile, [content]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> clearExceptionLogFile() =>
      (super.noSuchMethod(Invocation.method(#clearExceptionLogFile, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
}

/// A class which mocks [RecipeManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeManager extends _i1.Mock implements _i4.RecipeManager {
  MockRecipeManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.Future<List<_i3.RecipeCollectionEntity>> get collections =>
      (super.noSuchMethod(Invocation.getter(#collections),
              returnValue: Future<List<_i3.RecipeCollectionEntity>>.value(
                  <_i3.RecipeCollectionEntity>[]))
          as _i21.Future<List<_i3.RecipeCollectionEntity>>);
  @override
  _i21.Stream<List<_i3.RecipeCollectionEntity>> get collectionsAsStream =>
      (super.noSuchMethod(Invocation.getter(#collectionsAsStream),
              returnValue: Stream<List<_i3.RecipeCollectionEntity>>.empty())
          as _i21.Stream<List<_i3.RecipeCollectionEntity>>);
  @override
  _i21.Stream<List<_i11.RecipeEntity>> get recipes =>
      (super.noSuchMethod(Invocation.getter(#recipes),
              returnValue: Stream<List<_i11.RecipeEntity>>.empty())
          as _i21.Stream<List<_i11.RecipeEntity>>);
  @override
  set currentCollection(String? id) =>
      super.noSuchMethod(Invocation.setter(#currentCollection, id),
          returnValueForMissingStub: null);
  @override
  _i21.Future<_i3.RecipeCollectionEntity> collectionByID(String? id) =>
      (super.noSuchMethod(Invocation.method(#collectionByID, [id]),
              returnValue: Future<_i3.RecipeCollectionEntity>.value(
                  _FakeRecipeCollectionEntity()))
          as _i21.Future<_i3.RecipeCollectionEntity>);
  @override
  _i21.Future<_i3.RecipeCollectionEntity> createCollection(String? name) =>
      (super.noSuchMethod(Invocation.method(#createCollection, [name]),
              returnValue: Future<_i3.RecipeCollectionEntity>.value(
                  _FakeRecipeCollectionEntity()))
          as _i21.Future<_i3.RecipeCollectionEntity>);
  @override
  _i21.Future<String> createOrUpdate(_i11.RecipeEntity? recipe) =>
      (super.noSuchMethod(Invocation.method(#createOrUpdate, [recipe]),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  _i21.Future<void> renameCollection(
          String? name, _i3.RecipeCollectionEntity? collection) =>
      (super.noSuchMethod(
          Invocation.method(#renameCollection, [name, collection]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> deleteCollection(_i3.RecipeCollectionEntity? model) =>
      (super.noSuchMethod(Invocation.method(#deleteCollection, [model]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> addUserToCollection(
          _i3.RecipeCollectionEntity? model, String? userID, String? name) =>
      (super.noSuchMethod(
          Invocation.method(#addUserToCollection, [model, userID, name]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  String getNextRecipeDocumentId(String? recipeGroup) => (super.noSuchMethod(
      Invocation.method(#getNextRecipeDocumentId, [recipeGroup]),
      returnValue: '') as String);
  @override
  _i21.Future<void> deleteRecipe(_i11.RecipeEntity? recipe) =>
      (super.noSuchMethod(Invocation.method(#deleteRecipe, [recipe]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<List<_i11.RecipeEntity>> getAllRecipes() =>
      (super.noSuchMethod(Invocation.method(#getAllRecipes, []),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
  @override
  _i21.Future<List<_i11.RecipeEntity>> getRecipeById(List<String>? ids) =>
      (super.noSuchMethod(Invocation.method(#getRecipeById, [ids]),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
  @override
  _i21.Future<List<_i11.RecipeEntity>> getFavoriteRecipes() =>
      (super.noSuchMethod(Invocation.method(#getFavoriteRecipes, []),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
  @override
  _i21.Future<void> updateRating(_i11.RecipeEntity? recipe, int? rating) =>
      (super.noSuchMethod(Invocation.method(#updateRating, [recipe, rating]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<Map<String, int>> getRatings() =>
      (super.noSuchMethod(Invocation.method(#getRatings, []),
              returnValue: Future<Map<String, int>>.value(<String, int>{}))
          as _i21.Future<Map<String, int>>);
  @override
  _i21.Future<int> getRating(_i11.RecipeEntity? recipe) =>
      (super.noSuchMethod(Invocation.method(#getRating, [recipe]),
          returnValue: Future<int>.value(0)) as _i21.Future<int>);
  @override
  int? getCachedRating(_i11.RecipeEntity? recipe) =>
      (super.noSuchMethod(Invocation.method(#getCachedRating, [recipe]))
          as int?);
  @override
  _i21.Future<void> importRecipes(List<_i11.RecipeEntity>? recipes) =>
      (super.noSuchMethod(Invocation.method(#importRecipes, [recipes]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> leaveRecipeGroup(_i3.RecipeCollectionEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#leaveRecipeGroup, [entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> removeMember(_i24.UserEntity? user, String? group) =>
      (super.noSuchMethod(Invocation.method(#removeMember, [user, group]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i4.RecipeManager> init() => (super.noSuchMethod(
          Invocation.method(#init, []),
          returnValue: Future<_i4.RecipeManager>.value(_FakeRecipeManager()))
      as _i21.Future<_i4.RecipeManager>);
}

/// A class which mocks [ShoppingListManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockShoppingListManager extends _i1.Mock
    implements _i25.ShoppingListManager {
  MockShoppingListManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.Future<List<_i5.ShoppingListEntity>> get shoppingListsAsList =>
      (super.noSuchMethod(Invocation.getter(#shoppingListsAsList),
              returnValue: Future<List<_i5.ShoppingListEntity>>.value(
                  <_i5.ShoppingListEntity>[]))
          as _i21.Future<List<_i5.ShoppingListEntity>>);
  @override
  _i21.Future<_i5.ShoppingListEntity> createOrUpdate(
          _i5.ShoppingListEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#createOrUpdate, [entity]),
              returnValue: Future<_i5.ShoppingListEntity>.value(
                  _FakeShoppingListEntity()))
          as _i21.Future<_i5.ShoppingListEntity>);
  @override
  _i21.Future<void> delete(_i5.ShoppingListEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#delete, [entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
}

/// A class which mocks [StackTrace].
///
/// See the documentation for Mockito's code generation for more information.
class MockStackTrace extends _i1.Mock implements StackTrace {
  MockStackTrace() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [SimilarityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSimilarityService extends _i1.Mock implements _i26.SimilarityService {
  MockSimilarityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.Future<List<_i11.RecipeEntity>> getSimilarRecipes(
          _i11.RecipeEntity? sourceRecipe) =>
      (super.noSuchMethod(Invocation.method(#getSimilarRecipes, [sourceRecipe]),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
  @override
  bool containsIngredient(
          _i27.UnmodifiableListView<_i28.IngredientNoteEntity>? ingredients,
          String? targetIngredient) =>
      (super.noSuchMethod(
          Invocation.method(
              #containsIngredient, [ingredients, targetIngredient]),
          returnValue: false) as bool);
  @override
  _i21.Future<List<_i11.RecipeEntity>> getRecipesContaining(
          List<String>? targetIngredients) =>
      (super.noSuchMethod(
              Invocation.method(#getRecipesContaining, [targetIngredients]),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i8.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp()) as _i6.FirebaseApp);
  @override
  set app(_i6.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i21.Future<void> useEmulator(String? origin) =>
      (super.noSuchMethod(Invocation.method(#useEmulator, [origin]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#applyActionCode, [code]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i7.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#checkActionCode, [code]),
              returnValue:
                  Future<_i7.ActionCodeInfo>.value(_FakeActionCodeInfo()))
          as _i21.Future<_i7.ActionCodeInfo>);
  @override
  _i21.Future<void> confirmPasswordReset({String? code, String? newPassword}) =>
      (super.noSuchMethod(
          Invocation.method(#confirmPasswordReset, [],
              {#code: code, #newPassword: newPassword}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i8.UserCredential> createUserWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#createUserWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i8.UserCredential>.value(_FakeUserCredential()))
          as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<List<String>> fetchSignInMethodsForEmail(String? email) => (super
          .noSuchMethod(Invocation.method(#fetchSignInMethodsForEmail, [email]),
              returnValue: Future<List<String>>.value(<String>[]))
      as _i21.Future<List<String>>);
  @override
  _i21.Future<_i8.UserCredential> getRedirectResult() => (super.noSuchMethod(
          Invocation.method(#getRedirectResult, []),
          returnValue: Future<_i8.UserCredential>.value(_FakeUserCredential()))
      as _i21.Future<_i8.UserCredential>);
  @override
  bool isSignInWithEmailLink(String? emailLink) => (super.noSuchMethod(
      Invocation.method(#isSignInWithEmailLink, [emailLink]),
      returnValue: false) as bool);
  @override
  _i21.Stream<_i8.User?> authStateChanges() =>
      (super.noSuchMethod(Invocation.method(#authStateChanges, []),
          returnValue: Stream<_i8.User?>.empty()) as _i21.Stream<_i8.User?>);
  @override
  _i21.Stream<_i8.User?> idTokenChanges() =>
      (super.noSuchMethod(Invocation.method(#idTokenChanges, []),
          returnValue: Stream<_i8.User?>.empty()) as _i21.Stream<_i8.User?>);
  @override
  _i21.Stream<_i8.User?> userChanges() =>
      (super.noSuchMethod(Invocation.method(#userChanges, []),
          returnValue: Stream<_i8.User?>.empty()) as _i21.Stream<_i8.User?>);
  @override
  _i21.Future<void> sendPasswordResetEmail(
          {String? email, _i29.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendPasswordResetEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> sendSignInLinkToEmail(
          {String? email, _i29.ActionCodeSettings? actionCodeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#sendSignInLinkToEmail, [],
              {#email: email, #actionCodeSettings: actionCodeSettings}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(Invocation.method(#setLanguageCode, [languageCode]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> setSettings(
          {bool? appVerificationDisabledForTesting, String? userAccessGroup}) =>
      (super.noSuchMethod(
          Invocation.method(#setSettings, [], {
            #appVerificationDisabledForTesting:
                appVerificationDisabledForTesting,
            #userAccessGroup: userAccessGroup
          }),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> setPersistence(_i30.Persistence? persistence) =>
      (super.noSuchMethod(Invocation.method(#setPersistence, [persistence]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i8.UserCredential> signInAnonymously() => (super.noSuchMethod(
          Invocation.method(#signInAnonymously, []),
          returnValue: Future<_i8.UserCredential>.value(_FakeUserCredential()))
      as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<_i8.UserCredential> signInWithCredential(
          _i31.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithCredential, [credential]),
              returnValue:
                  Future<_i8.UserCredential>.value(_FakeUserCredential()))
          as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<_i8.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#signInWithCustomToken, [token]),
              returnValue:
                  Future<_i8.UserCredential>.value(_FakeUserCredential()))
          as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<_i8.UserCredential> signInWithEmailAndPassword(
          {String? email, String? password}) =>
      (super.noSuchMethod(
              Invocation.method(#signInWithEmailAndPassword, [],
                  {#email: email, #password: password}),
              returnValue:
                  Future<_i8.UserCredential>.value(_FakeUserCredential()))
          as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<_i8.UserCredential> signInWithEmailLink(
          {String? email, String? emailLink}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signInWithEmailLink, [], {#email: email, #emailLink: emailLink}),
          returnValue:
              Future<_i8.UserCredential>.value(_FakeUserCredential())) as _i21
          .Future<_i8.UserCredential>);
  @override
  _i21.Future<_i8.ConfirmationResult> signInWithPhoneNumber(String? phoneNumber,
          [_i8.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
          Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
          returnValue: Future<_i8.ConfirmationResult>.value(
              _FakeConfirmationResult())) as _i21
          .Future<_i8.ConfirmationResult>);
  @override
  _i21.Future<_i8.UserCredential> signInWithPopup(
          _i32.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithPopup, [provider]),
              returnValue:
                  Future<_i8.UserCredential>.value(_FakeUserCredential()))
          as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<void> signInWithRedirect(_i32.AuthProvider? provider) =>
      (super.noSuchMethod(Invocation.method(#signInWithRedirect, [provider]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(Invocation.method(#verifyPasswordResetCode, [code]),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  _i21.Future<void> verifyPhoneNumber(
          {String? phoneNumber,
          _i30.PhoneVerificationCompleted? verificationCompleted,
          _i30.PhoneVerificationFailed? verificationFailed,
          _i30.PhoneCodeSent? codeSent,
          _i30.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
          String? autoRetrievedSmsCodeForTesting,
          Duration? timeout = const Duration(seconds: 30),
          int? forceResendingToken}) =>
      (super.noSuchMethod(
          Invocation.method(#verifyPhoneNumber, [], {
            #phoneNumber: phoneNumber,
            #verificationCompleted: verificationCompleted,
            #verificationFailed: verificationFailed,
            #codeSent: codeSent,
            #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
            #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
            #timeout: timeout,
            #forceResendingToken: forceResendingToken
          }),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [User].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser extends _i1.Mock implements _i8.User {
  MockUser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get emailVerified =>
      (super.noSuchMethod(Invocation.getter(#emailVerified), returnValue: false)
          as bool);
  @override
  bool get isAnonymous =>
      (super.noSuchMethod(Invocation.getter(#isAnonymous), returnValue: false)
          as bool);
  @override
  _i9.UserMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
          returnValue: _FakeUserMetadata()) as _i9.UserMetadata);
  @override
  List<_i33.UserInfo> get providerData =>
      (super.noSuchMethod(Invocation.getter(#providerData),
          returnValue: <_i33.UserInfo>[]) as List<_i33.UserInfo>);
  @override
  String get uid =>
      (super.noSuchMethod(Invocation.getter(#uid), returnValue: '') as String);
  @override
  _i21.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<String> getIdToken([bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdToken, [forceRefresh]),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  _i21.Future<_i10.IdTokenResult> getIdTokenResult(
          [bool? forceRefresh = false]) =>
      (super.noSuchMethod(Invocation.method(#getIdTokenResult, [forceRefresh]),
              returnValue:
                  Future<_i10.IdTokenResult>.value(_FakeIdTokenResult()))
          as _i21.Future<_i10.IdTokenResult>);
  @override
  _i21.Future<_i8.UserCredential> linkWithCredential(
          _i31.AuthCredential? credential) =>
      (super.noSuchMethod(Invocation.method(#linkWithCredential, [credential]),
              returnValue:
                  Future<_i8.UserCredential>.value(_FakeUserCredential()))
          as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<_i8.ConfirmationResult> linkWithPhoneNumber(String? phoneNumber,
          [_i8.RecaptchaVerifier? verifier]) =>
      (super.noSuchMethod(
              Invocation.method(#linkWithPhoneNumber, [phoneNumber, verifier]),
              returnValue: Future<_i8.ConfirmationResult>.value(
                  _FakeConfirmationResult()))
          as _i21.Future<_i8.ConfirmationResult>);
  @override
  _i21.Future<_i8.UserCredential> reauthenticateWithCredential(
          _i31.AuthCredential? credential) =>
      (super.noSuchMethod(
              Invocation.method(#reauthenticateWithCredential, [credential]),
              returnValue:
                  Future<_i8.UserCredential>.value(_FakeUserCredential()))
          as _i21.Future<_i8.UserCredential>);
  @override
  _i21.Future<void> reload() =>
      (super.noSuchMethod(Invocation.method(#reload, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> sendEmailVerification(
          [_i29.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(#sendEmailVerification, [actionCodeSettings]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i8.User> unlink(String? providerId) =>
      (super.noSuchMethod(Invocation.method(#unlink, [providerId]),
              returnValue: Future<_i8.User>.value(_FakeUser()))
          as _i21.Future<_i8.User>);
  @override
  _i21.Future<void> updateEmail(String? newEmail) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [newEmail]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> updatePassword(String? newPassword) =>
      (super.noSuchMethod(Invocation.method(#updatePassword, [newPassword]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> updatePhoneNumber(
          _i34.PhoneAuthCredential? phoneCredential) =>
      (super.noSuchMethod(
          Invocation.method(#updatePhoneNumber, [phoneCredential]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> updateProfile({String? displayName, String? photoURL}) =>
      (super.noSuchMethod(
          Invocation.method(#updateProfile, [],
              {#displayName: displayName, #photoURL: photoURL}),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> verifyBeforeUpdateEmail(String? newEmail,
          [_i29.ActionCodeSettings? actionCodeSettings]) =>
      (super.noSuchMethod(
          Invocation.method(
              #verifyBeforeUpdateEmail, [newEmail, actionCodeSettings]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [ChefkochAccessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockChefkochAccessor extends _i1.Mock implements _i35.ChefkochAccessor {
  MockChefkochAccessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i21.Future<_i11.RecipeEntity> getRecipe(String? id) =>
      (super.noSuchMethod(Invocation.method(#getRecipe, [id]),
              returnValue: Future<_i11.RecipeEntity>.value(_FakeRecipeEntity()))
          as _i21.Future<_i11.RecipeEntity>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i36.NavigatorObserver {
  @override
  void didPush(
          _i36.Route<dynamic>? route, _i36.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPush, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didPop(_i36.Route<dynamic>? route, _i36.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didPop, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didRemove(
          _i36.Route<dynamic>? route, _i36.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(Invocation.method(#didRemove, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didReplace(
          {_i36.Route<dynamic>? newRoute, _i36.Route<dynamic>? oldRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #didReplace, [], {#newRoute: newRoute, #oldRoute: oldRoute}),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture(
          _i36.Route<dynamic>? route, _i36.Route<dynamic>? previousRoute) =>
      super.noSuchMethod(
          Invocation.method(#didStartUserGesture, [route, previousRoute]),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [MealPlanManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealPlanManager extends _i1.Mock implements _i14.MealPlanManager {
  @override
  _i21.Future<_i12.MealPlanEntity?> get mealPlan =>
      (super.noSuchMethod(Invocation.getter(#mealPlan),
              returnValue:
                  Future<_i12.MealPlanEntity?>.value(_FakeMealPlanEntity()))
          as _i21.Future<_i12.MealPlanEntity?>);
  @override
  set currentCollection(String? value) =>
      super.noSuchMethod(Invocation.setter(#currentCollection, value),
          returnValueForMissingStub: null);
  @override
  _i21.Future<List<_i13.MealPlanCollectionEntity>> get collections =>
      (super.noSuchMethod(Invocation.getter(#collections),
              returnValue: Future<List<_i13.MealPlanCollectionEntity>>.value(
                  <_i13.MealPlanCollectionEntity>[]))
          as _i21.Future<List<_i13.MealPlanCollectionEntity>>);
  @override
  _i21.Stream<List<_i13.MealPlanCollectionEntity>> get collectionsAsStream =>
      (super.noSuchMethod(Invocation.getter(#collectionsAsStream),
              returnValue: Stream<List<_i13.MealPlanCollectionEntity>>.empty())
          as _i21.Stream<List<_i13.MealPlanCollectionEntity>>);
  @override
  _i21.Future<_i13.MealPlanCollectionEntity> createCollection(String? name) =>
      (super.noSuchMethod(Invocation.method(#createCollection, [name]),
              returnValue: Future<_i13.MealPlanCollectionEntity>.value(
                  _FakeMealPlanCollectionEntity()))
          as _i21.Future<_i13.MealPlanCollectionEntity>);
  @override
  _i21.Future<void> renameCollection(
          String? name, _i13.MealPlanCollectionEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#renameCollection, [name, entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i13.MealPlanCollectionEntity> getCollectionByID(String? id) =>
      (super.noSuchMethod(Invocation.method(#getCollectionByID, [id]),
              returnValue: Future<_i13.MealPlanCollectionEntity>.value(
                  _FakeMealPlanCollectionEntity()))
          as _i21.Future<_i13.MealPlanCollectionEntity>);
  @override
  _i21.Future<void> saveMealPlan(_i12.MealPlanEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#saveMealPlan, [entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> addUserToCollection(_i13.MealPlanCollectionEntity? entity,
          String? userID, String? name) =>
      (super.noSuchMethod(
          Invocation.method(#addUserToCollection, [entity, userID, name]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> deleteCollection(_i13.MealPlanCollectionEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#deleteCollection, [entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> leaveGroup(_i13.MealPlanCollectionEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#leaveGroup, [entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i12.MealPlanEntity?> getMealPlanByCollectionID(String? id) =>
      (super.noSuchMethod(Invocation.method(#getMealPlanByCollectionID, [id]),
              returnValue:
                  Future<_i12.MealPlanEntity?>.value(_FakeMealPlanEntity()))
          as _i21.Future<_i12.MealPlanEntity?>);
  @override
  _i21.Future<_i14.MealPlanManager> init() =>
      (super.noSuchMethod(Invocation.method(#init, []),
              returnValue:
                  Future<_i14.MealPlanManager>.value(_FakeMealPlanManager()))
          as _i21.Future<_i14.MealPlanManager>);
  @override
  _i21.Future<void> removeMember(_i24.UserEntity? user, String? mealPlan) =>
      (super.noSuchMethod(Invocation.method(#removeMember, [user, mealPlan]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
}

/// A class which mocks [ImageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageManager extends _i1.Mock implements _i37.ImageManager {
  @override
  _i21.Future<void> uploadRecipeImage(String? recipeId, _i2.File? file) =>
      (super.noSuchMethod(
          Invocation.method(#uploadRecipeImage, [recipeId, file]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> uploadRecipeImageFromBytes(
          String? recipeId, _i38.Uint8List? bytes) =>
      (super.noSuchMethod(
          Invocation.method(#uploadRecipeImageFromBytes, [recipeId, bytes]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> deleteRecipeImage(_i11.RecipeEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#deleteRecipeImage, [entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<String> getRecipeImageURL(String? recipeId) =>
      (super.noSuchMethod(Invocation.method(#getRecipeImageURL, [recipeId]),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  String getRecipeImagePath(String? recipeId) =>
      (super.noSuchMethod(Invocation.method(#getRecipeImagePath, [recipeId]),
          returnValue: '') as String);
  @override
  _i21.Future<_i2.File?> getRecipeImageFile(_i11.RecipeEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#getRecipeImageFile, [entity]),
              returnValue: Future<_i2.File?>.value(_FakeFile()))
          as _i21.Future<_i2.File?>);
  @override
  _i21.Future<void> deleteLocalImage(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#deleteLocalImage, [fileName]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
}

/// A class which mocks [FirebaseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseProvider extends _i1.Mock implements _i16.FirebaseProvider {
  @override
  _i21.Stream<List<_i13.MealPlanCollectionEntity>> get mealPlanGroups =>
      (super.noSuchMethod(Invocation.getter(#mealPlanGroups),
              returnValue: Stream<List<_i13.MealPlanCollectionEntity>>.empty())
          as _i21.Stream<List<_i13.MealPlanCollectionEntity>>);
  @override
  _i21.Future<List<_i5.ShoppingListEntity>> get shoppingListsAsList =>
      (super.noSuchMethod(Invocation.getter(#shoppingListsAsList),
              returnValue: Future<List<_i5.ShoppingListEntity>>.value(
                  <_i5.ShoppingListEntity>[]))
          as _i21.Future<List<_i5.ShoppingListEntity>>);
  @override
  _i21.Future<List<_i13.MealPlanCollectionEntity>> get mealPlanGroupsAsList =>
      (super.noSuchMethod(Invocation.getter(#mealPlanGroupsAsList),
              returnValue: Future<List<_i13.MealPlanCollectionEntity>>.value(
                  <_i13.MealPlanCollectionEntity>[]))
          as _i21.Future<List<_i13.MealPlanCollectionEntity>>);
  @override
  String get userUid =>
      (super.noSuchMethod(Invocation.getter(#userUid), returnValue: '')
          as String);
  @override
  _i21.Future<List<_i39.QueryDocumentSnapshot>> getShoppingListsByMealPlan(
          String? mealPlan) =>
      (super.noSuchMethod(
              Invocation.method(#getShoppingListsByMealPlan, [mealPlan]),
              returnValue: Future<List<_i39.QueryDocumentSnapshot>>.value(
                  <_i39.QueryDocumentSnapshot>[]))
          as _i21.Future<List<_i39.QueryDocumentSnapshot>>);
  @override
  _i21.Future<_i15.MealPlanCollectionEntityFirebase> createMealPlanGroup(
          String? name) =>
      (super.noSuchMethod(Invocation.method(#createMealPlanGroup, [name]),
              returnValue: Future<_i15.MealPlanCollectionEntityFirebase>.value(
                  _FakeMealPlanCollectionEntityFirebase()))
          as _i21.Future<_i15.MealPlanCollectionEntityFirebase>);
  @override
  _i21.Future<void> renameMealPlanCollection(
          String? name, _i13.MealPlanCollectionEntity? entity) =>
      (super.noSuchMethod(
          Invocation.method(#renameMealPlanCollection, [name, entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<List<_i13.MealPlanCollectionEntity>>
      mealPlanCollectionsAsList() => (super.noSuchMethod(
              Invocation.method(#mealPlanCollectionsAsList, []),
              returnValue: Future<List<_i13.MealPlanCollectionEntity>>.value(
                  <_i13.MealPlanCollectionEntity>[]))
          as _i21.Future<List<_i13.MealPlanCollectionEntity>>);
  @override
  _i21.Future<_i16.FirebaseProvider> init() =>
      (super.noSuchMethod(Invocation.method(#init, []),
              returnValue:
                  Future<_i16.FirebaseProvider>.value(_FakeFirebaseProvider()))
          as _i21.Future<_i16.FirebaseProvider>);
  @override
  _i21.Future<_i3.RecipeCollectionEntity> createRecipeCollection(
          String? name) =>
      (super.noSuchMethod(Invocation.method(#createRecipeCollection, [name]),
              returnValue: Future<_i3.RecipeCollectionEntity>.value(
                  _FakeRecipeCollectionEntity()))
          as _i21.Future<_i3.RecipeCollectionEntity>);
  @override
  _i21.Future<void> renameRecipeCollection(
          String? name, _i3.RecipeCollectionEntity? entity) =>
      (super.noSuchMethod(
          Invocation.method(#renameRecipeCollection, [name, entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<List<_i3.RecipeCollectionEntity>> recipeCollectionsAsList() =>
      (super.noSuchMethod(Invocation.method(#recipeCollectionsAsList, []),
              returnValue: Future<List<_i3.RecipeCollectionEntity>>.value(
                  <_i3.RecipeCollectionEntity>[]))
          as _i21.Future<List<_i3.RecipeCollectionEntity>>);
  @override
  _i21.Stream<List<_i3.RecipeCollectionEntity>> recipeCollectionsAsStream() =>
      (super.noSuchMethod(Invocation.method(#recipeCollectionsAsStream, []),
              returnValue: Stream<List<_i3.RecipeCollectionEntity>>.empty())
          as _i21.Stream<List<_i3.RecipeCollectionEntity>>);
  @override
  _i21.Stream<List<_i11.RecipeEntity>> recipes(String? groupId) =>
      (super.noSuchMethod(Invocation.method(#recipes, [groupId]),
              returnValue: Stream<List<_i11.RecipeEntity>>.empty())
          as _i21.Stream<List<_i11.RecipeEntity>>);
  @override
  _i21.Future<String> createOrUpdateRecipe(_i11.RecipeEntity? recipe) =>
      (super.noSuchMethod(Invocation.method(#createOrUpdateRecipe, [recipe]),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  _i21.Future<void> deleteRecipe(_i11.RecipeEntity? recipe) =>
      (super.noSuchMethod(Invocation.method(#deleteRecipe, [recipe]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i3.RecipeCollectionEntity> recipeCollectionByID(String? id) =>
      (super.noSuchMethod(Invocation.method(#recipeCollectionByID, [id]),
              returnValue: Future<_i3.RecipeCollectionEntity>.value(
                  _FakeRecipeCollectionEntity()))
          as _i21.Future<_i3.RecipeCollectionEntity>);
  @override
  _i21.Future<void> deleteRecipeCollection(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteRecipeCollection, [id]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> deleteMealPlanCollection(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteMealPlanCollection, [id]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> deleteShoppingList(_i5.ShoppingListEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#deleteShoppingList, [entity]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> addUserToCollection(
          _i3.RecipeCollectionEntity? model, String? newUserID, String? name) =>
      (super.noSuchMethod(
          Invocation.method(#addUserToCollection, [model, newUserID, name]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> addUserToMealPlanCollection(
          _i13.MealPlanCollectionEntity? model,
          String? newUserID,
          String? name) =>
      (super.noSuchMethod(
          Invocation.method(
              #addUserToMealPlanCollection, [model, newUserID, name]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  String getNextRecipeDocumentId(String? recipeGroup) => (super.noSuchMethod(
      Invocation.method(#getNextRecipeDocumentId, [recipeGroup]),
      returnValue: '') as String);
  @override
  _i21.Future<List<_i40.IngredientNoteEntityFirebase>> recipeIngredients(
          String? recipeGroup, String? recipeID) =>
      (super.noSuchMethod(
          Invocation.method(#recipeIngredients, [recipeGroup, recipeID]),
          returnValue: Future<List<_i40.IngredientNoteEntityFirebase>>.value(
              <_i40.IngredientNoteEntityFirebase>[])) as _i21
          .Future<List<_i40.IngredientNoteEntityFirebase>>);
  @override
  _i21.Future<List<_i11.RecipeEntity>> getAllRecipes() =>
      (super.noSuchMethod(Invocation.method(#getAllRecipes, []),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
  @override
  _i21.Future<List<_i17.RatingEntity>> getRatings() =>
      (super.noSuchMethod(Invocation.method(#getRatings, []),
              returnValue:
                  Future<List<_i17.RatingEntity>>.value(<_i17.RatingEntity>[]))
          as _i21.Future<List<_i17.RatingEntity>>);
  @override
  _i21.Future<_i17.RatingEntity?> getRatingById(String? recipeId) =>
      (super.noSuchMethod(Invocation.method(#getRatingById, [recipeId]),
              returnValue:
                  Future<_i17.RatingEntity?>.value(_FakeRatingEntity()))
          as _i21.Future<_i17.RatingEntity?>);
  @override
  _i21.Future<List<_i11.RecipeEntity>> getRecipeById(List<String>? ids) =>
      (super.noSuchMethod(Invocation.method(#getRecipeById, [ids]),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
  @override
  _i21.Future<List<_i41.InstructionEntityFirebase>> recipeInstructions(
          String? recipeGroup, String? recipeID) =>
      (super.noSuchMethod(
              Invocation.method(#recipeInstructions, [recipeGroup, recipeID]),
              returnValue: Future<List<_i41.InstructionEntityFirebase>>.value(
                  <_i41.InstructionEntityFirebase>[]))
          as _i21.Future<List<_i41.InstructionEntityFirebase>>);
  @override
  _i21.Future<void> updateRating(_i11.RecipeEntity? recipe, int? rating) =>
      (super.noSuchMethod(Invocation.method(#updateRating, [recipe, rating]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i12.MealPlanEntity> mealPlan(String? groupID) =>
      (super.noSuchMethod(Invocation.method(#mealPlan, [groupID]),
              returnValue:
                  Future<_i12.MealPlanEntity>.value(_FakeMealPlanEntity()))
          as _i21.Future<_i12.MealPlanEntity>);
  @override
  _i21.Future<String> saveMealPlan(_i12.MealPlanEntity? entity) =>
      (super.noSuchMethod(Invocation.method(#saveMealPlan, [entity]),
          returnValue: Future<String>.value('')) as _i21.Future<String>);
  @override
  _i21.Future<List<_i11.RecipeEntity>> importRecipes(
          List<_i11.RecipeEntity>? recipes, String? groupId) =>
      (super.noSuchMethod(Invocation.method(#importRecipes, [recipes, groupId]),
              returnValue:
                  Future<List<_i11.RecipeEntity>>.value(<_i11.RecipeEntity>[]))
          as _i21.Future<List<_i11.RecipeEntity>>);
  @override
  _i21.Future<void> leaveMealPlanGroup(String? id) =>
      (super.noSuchMethod(Invocation.method(#leaveMealPlanGroup, [id]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> leaveRecipeGroup(String? id) =>
      (super.noSuchMethod(Invocation.method(#leaveRecipeGroup, [id]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i13.MealPlanCollectionEntity> getMealPlanGroupByID(String? id) =>
      (super.noSuchMethod(Invocation.method(#getMealPlanGroupByID, [id]),
              returnValue: Future<_i13.MealPlanCollectionEntity>.value(
                  _FakeMealPlanCollectionEntity()))
          as _i21.Future<_i13.MealPlanCollectionEntity>);
  @override
  _i21.Future<_i12.MealPlanEntity?> getMealPlanByID(String? id) =>
      (super.noSuchMethod(Invocation.method(#getMealPlanByID, [id]),
              returnValue:
                  Future<_i12.MealPlanEntity?>.value(_FakeMealPlanEntity()))
          as _i21.Future<_i12.MealPlanEntity?>);
  @override
  _i21.Future<void> updateImageReference(String? id, String? value) =>
      (super.noSuchMethod(Invocation.method(#updateImageReference, [id, value]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<_i5.ShoppingListEntity> createOrUpdateShoppingList(
          _i5.ShoppingListEntity? entity) =>
      (super.noSuchMethod(
              Invocation.method(#createOrUpdateShoppingList, [entity]),
              returnValue: Future<_i5.ShoppingListEntity>.value(
                  _FakeShoppingListEntity()))
          as _i21.Future<_i5.ShoppingListEntity>);
  @override
  _i21.Future<void> removeFromMealPlan(
          _i24.UserEntity? user, String? mealPlan) =>
      (super.noSuchMethod(
          Invocation.method(#removeFromMealPlan, [user, mealPlan]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
  @override
  _i21.Future<void> removeFromRecipeGroup(
          _i24.UserEntity? user, String? group) =>
      (super.noSuchMethod(
          Invocation.method(#removeFromRecipeGroup, [user, group]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i21.Future<void>);
}

/// A class which mocks [ImageTextExtractor].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageTextExtractor extends _i1.Mock
    implements _i42.ImageTextExtractor {
  @override
  _i21.Future<_i18.RecipeOverviewEditStep> processOverviewImage(
          _i2.File? file) =>
      (super.noSuchMethod(Invocation.method(#processOverviewImage, [file]),
              returnValue: Future<_i18.RecipeOverviewEditStep>.value(
                  _FakeRecipeOverviewEditStep()))
          as _i21.Future<_i18.RecipeOverviewEditStep>);
  @override
  _i21.Future<_i18.RecipeIngredientEditStep> processIngredientsImage(
          _i2.File? file) =>
      (super.noSuchMethod(Invocation.method(#processIngredientsImage, [file]),
              returnValue: Future<_i18.RecipeIngredientEditStep>.value(
                  _FakeRecipeIngredientEditStep()))
          as _i21.Future<_i18.RecipeIngredientEditStep>);
  @override
  _i21.Future<_i18.RecipeInstructionEditStep> processInstructionsImage(
          _i2.File? file,
          {String? recipeTitle,
          String? recipeDescription}) =>
      (super.noSuchMethod(
              Invocation.method(#processInstructionsImage, [
                file
              ], {
                #recipeTitle: recipeTitle,
                #recipeDescription: recipeDescription
              }),
              returnValue: Future<_i18.RecipeInstructionEditStep>.value(
                  _FakeRecipeInstructionEditStep()))
          as _i21.Future<_i18.RecipeInstructionEditStep>);
  @override
  _i18.RecipeOverviewEditStep processOverviewImageFromText(
          _i43.VisionText? text) =>
      (super.noSuchMethod(
              Invocation.method(#processOverviewImageFromText, [text]),
              returnValue: _FakeRecipeOverviewEditStep())
          as _i18.RecipeOverviewEditStep);
  @override
  _i18.RecipeIngredientEditStep processIngredientsImageFromText(
          _i43.VisionText? text) =>
      (super.noSuchMethod(
              Invocation.method(#processIngredientsImageFromText, [text]),
              returnValue: _FakeRecipeIngredientEditStep())
          as _i18.RecipeIngredientEditStep);
  @override
  _i18.RecipeInstructionEditStep processInstructionsImageFromText(
          _i43.VisionText? text,
          {String? recipeTitle,
          String? recipeDescription}) =>
      (super.noSuchMethod(
              Invocation.method(#processInstructionsImageFromText, [
                text
              ], {
                #recipeTitle: recipeTitle,
                #recipeDescription: recipeDescription
              }),
              returnValue: _FakeRecipeInstructionEditStep())
          as _i18.RecipeInstructionEditStep);
}

/// A class which mocks [NavigatorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorService extends _i1.Mock implements _i44.NavigatorService {
  @override
  _i19.GlobalKey<_i36.NavigatorState> get navigatorKey =>
      (super.noSuchMethod(Invocation.getter(#navigatorKey),
              returnValue: _FakeGlobalKey<_i36.NavigatorState>())
          as _i19.GlobalKey<_i36.NavigatorState>);
}
